#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

void solve() {
    int n;
    std::cin >> n;
    std::vector<int> arr(n);
    std::vector<int> non_pos;
    std::vector<int> pos;
    for (int i = 0; i < n; ++i) {
        std::cin >> arr[i];
        if (arr[i] <= 0) {
            non_pos.push_back(arr[i]);
        } else {
            pos.push_back(arr[i]);
        }
    }

    std::sort(non_pos.begin(), non_pos.end());

    int answer = non_pos.size();

    long long min_diff = LLONG_MAX;
    if (non_pos.size() > 1) {
        for (size_t i = 1; i < non_pos.size(); ++i) {
            min_diff = std::min(min_diff, (long long)non_pos[i] - non_pos[i-1]);
        }
    }

    if (!pos.empty()) {
        int smallest_pos = *std::min_element(pos.begin(), pos.end());
        if (smallest_pos <= min_diff) {
            answer += 1;
        }
    }

    std::cout << answer << std::endl;
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    int t;
    std::cin >> t;
    while (t--) {
        solve();
    }
    return 0;
}
